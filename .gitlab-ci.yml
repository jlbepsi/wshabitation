variables:
    IMG_JDK_GRADLE: gradle:jdk17-alpine
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

stages:          # List of stages for jobs, and their order of execution
    - clean
    - build
    - test
    - quality
#   - deploy

clean_job:
    stage: clean
    image: $IMG_JDK_GRADLE
    script:
        - echo "Cleaning from previous builds"
        - gradle clean

build_job:
    stage: build
    image: $IMG_JDK_GRADLE
    script:
        - gradle build
    artifacts:
        paths:
            - build/libs/*.jar

unit_test_job:
    image: $IMG_JDK_GRADLE
    stage: test
    script:
        - echo "Running unit tests..."
        - gradle test -Dspring.profiles.active=test

code_quality_job:
    stage: quality
    image: docker:stable
    allow_failure: true
    services:
        - docker:stable-dind
    script:
        - mkdir codequality-results
        - docker run
            --env CODECLIMATE_CODE="$PWD"
            --volume "$PWD":/code
            --volume /var/run/docker.sock:/var/run/docker.sock
            --volume /tmp/cc:/tmp/cc
            codeclimate/codeclimate analyze -f html > ./codequality-results/index.html
    artifacts:
        paths:
            - codequality-results/

sonarcloud-check:
    stage: quality
    image: $IMG_JDK_GRADLE
    allow_failure: true
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script: gradle sonarqube
    only:
        - main
        - develop


#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
