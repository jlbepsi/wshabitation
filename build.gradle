plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.4.0.2513"
    id "com.palantir.docker" version("0.34.0")
    id "com.palantir.docker-run" version("0.34.0")
    id 'java'
}

group = 'devops.kilroywashere'
version = '0.0.1'
// version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '17'

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectKey", "jlbepsi_wshabitation"
        property "sonar.organization", "jlbepsi-gitlab"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:1.4.2.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-test:1.4.2.RELEASE'

    // Tests
    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    implementation('org.assertj:assertj-core:3.22.0')
    //implementation('org.mockito:mockito-core:1.10.19')

    runtimeOnly 'mysql:mysql-connector-java'
    // testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Tests
    testImplementation('org.springframework.boot:spring-boot-starter-test')
            {
                exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
            }
}

// Dockerfile
docker {
    dependsOn(build)
    // bootJar.baseName resolves to the artifact name, without version and extension information
    name "${rootProject.name }:${version}"
    tag("current", "${rootProject.name }:${version}")
    tag("latest", "${rootProject.name }:latest")

    dockerfile file('docker/DockerfileGradle')

    // bootJar.archivePath resolves to the absolute path of the artifact file
    files bootJar.archiveFile, "src/main/resources/application.properties",
            "src/main/resources/logback-spring.xml"
    // bootJar.archiveName resolves to the artifact name, including version and extension
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
}

dockerRun {
    name "${rootProject.name }"
    image "${rootProject.name }:${version}"
    ports "8011:8080"
    clean true
}

tasks.named('test') {
    useJUnitPlatform()
}
